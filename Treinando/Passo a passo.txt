// ANOTAÇÕES
- "F4" ABRE "Solution Explorer"
- "Ctrl+K+D" IDENTA O CODIGO
- "Ctrl+K+C" COMENTA LINHAS SELECIONADAS
- "Ctrl+K+U" DESCOMENTA LINHAS SELECIONADAS
- "Ctrl+." OU "Alt+Enter" EXIBE SUGESTOES DE CORREÇÃO DE ERRO
- "prop+Tab+Tab" ADICIONA UMA PROPRIEDADE GENÉRICA À CLASSE
- "ctor+Tab+Tab" ADICIONA UM CONSTRUTOR À CLASSE
- "TempData["chave"]" e "ViewBag.Chave" ARMAZENA VARIAVEIS DE QUALQUER TIPO
E SERVE PARA PASSAR DADOS DO CONTROLLER PARA A View
- É POSSÍVEL AINDA RETORNAR UM DADO PELO PARÂMETRO DA View
E RECUPERÁ-LO ESCREVENDO
"@model TipoDoDado" NO INÍCIO DA View E CHAMÁ-LO POR "@Model"
- PODE SE ESCREVER CODIGOS C# DESDE QUE COLOQUE "@" NA FRENTE
- HELPERS SÃO MÉTODOS C# QUE ENCAPSULAM CODIGOS HTML PARA FACILITAR SUA ESCRITA
- "@Html." ARMAZENA HELPERS PADRÕES
- PODE SE CRIAR UMA PASTA NO PROJETO CHAMADA "App_Code" PARA
CRIAR SEU PRÓPRIO ARQUIVO DE HELPERS E CHAMÁ-LOS POR "@NomeDoArquivo.NomeDoHelper"
- MÉTODOS "GET" SÃO FEITOS PELO URL DO SITE
E SEUS DADOS CASO EXISTAM APARECEM LÁ
- UM MÉTODO "POST" É UTILIZADO PARA ENVIAR DADOS PARA A CONTROLLER
SEM DEIXÁ-LOS EXPOSTOS NA URL
APÓS UM "POST" DEVE-SE SEMPRE FAZER UM "RedirectToAction()"
- ENTRE "GET" E "POST" NENHUM É MELHOR QUE O OUTRO
ELES TÊM PROPÓSITOS DIFERENTES
- POR PADRÃO, UM MÉTODO É CHAMADO POR "GET"
MAS ISSO PODE SER DEFINIDO ESCREVENDO "[HttpGet]" OU "[HttpPost]"
ANTES DO MÉTODO DA CONTROLLER
- UMA ACTION PODE TER VÁRIOS MÉTODOS GETS E POSTS
DESDE QUE A ASSINATURA SEJA DIFERENTE
- ASSINATURA É A QUANTIDADE, TIPOS E ORDEM DOS PARÂMETROS DO MÉTODO
- "[Display(Name = "Nome do Campo")]" DEFINE O NOME DO CAMPO QUE APARECERÁ
- EM "MVC > App_Start > RouteConfig.cs"
É POSSIVEL TROCAR O CAMINHO DA ROTA PADRÃO (/Home/Index)
- OBS: TODAS AS CLASSES E INTERFACES DEVEM SER PUBLICAS

// CRIANDO O PROJETO
- "File > New > Project..."
- "Visual C# > Web > ASP.NET Web Application (.NET Framework)" E CLICA EM OK
- SELECIONA "Empty", MARCA A CHECKBOX "MVC" E CLICA EM "OK"

// CRIANDO A CONTROLLER HOME E A ACTION INDEX
- CLICA EM "Controllers > Add > Controller" NA "Solution Explorer"
- SELECIONA "Empty" E CLICA EM "OK"
- RENOMEIA PARA "HomeController" E CLICA EM "Add"
- FOI CRIADO O DOCUMENTO "HomeController.cs" COM UMA ACTION CHAMADA "Index"
- CLICA COM BOTÃO DIREITO EM "View();", CLICA EM Add View... E "Add"

//CRIANDO BANCO, STRING DE CONEXÃO E TABELA DE ALUNOS
- NA "Solution Explorer"
- "Solution > Add > New Project..."
- "SQL Server > SQL Server Database Project"
- NOMEIA DE "Treinando01.Banco" E CLICA EM OK
- "MVC > Web.config" E ADICIONA A STRING DE CONEXÃO:
ANTES DE FECHAR O "</configuration>"
<connectionStrings>
  <add name="DBAlunos"
       connectionString="Data Source=(LocalDB)\MSSQLLocalDB;
       Database=DBAlunos;
       Integrated Security=True"
       providerName="System.Data.SqlClient"/>
</connectionStrings>
  
- "Treinando01.Banco > Add > Table..."
- NOMEIA DE "Aluno" E CLICA EM OK
- DENTRO DA TABELA CRIE DEFINA OS CAMPOS E O TIPO DE CADA UM DELES
- ADICIONE A PALAVRA "IDENTITY" NA FRENTE DE "PRIMARY KEY"
CASO TENHA AUTO INCREMENTO
- PARA PUBLICAR O BANCO
- "Treinando01.Banco > Publish..."
- "Edit... > Browse > Local > MSSLQLocalDB" E CLICA EM OK
- DEFINE O NOME DO BANCO PARA "DBAlunos" E CLICA EM "Publish" 

// CRIANDO "AlunoModel"
- "Models > Add > Class..."
- NOMEIA DE "AlunoModel" E CLICA EM "Add"
- DENTRO DO ARQUIVO CRIADO ("AlunoModel.cs") ADICIONA AS PROPRIEDADES
Id, Nome e Rm
- CRIE UM CONSTRUTOR VAZIO E UM QUE 
RECEBA UM "AlunoMOD" E CONVERTA PARA "AlunoModel"
CONSERTE O ERRO FAZENDO A REFERENCIA AO MOD (using Treinando01.MOD;)

// CRIANDO A CAMADA MOD
- CLIQUE COM O BOTÃO DIREITO NA SOLUÇÃO EM "Solution Explorer"
- "Solution > Add > New Project..."
- "Visual C# > Class Library (.NET Framework)"
- NOMEIA DE "Treinando01.MOD" E CLICA EM OK
- DELETA A "Class1.cs" QUE VEM POR PADRÃO
- ADICIONA UMA PASTA DE "Enums" CASO NECESSÁRIO
- ADICIONA UMA CLASSE CHAMADA "AlunoMOD" AO PROJETO "MOD"
- DENTRO DA CLASSE "AlunoMOD" CRIE OS MESMOS ATRIBUTOS DA CLASSE "AlunoModel"

// ADICIONANDO "Dapper" AO PROJETO E ATUALIZANDO BOOTSTRAP E JQuery
- BOTÃO DIREITO NO PROJETO DAL E EM "Manage NuGet Packages..."
- "Browse", BUSCA POR "Dapper" E INSTALA
- BOTÃO DIREITO NO PROJETO MVC E EM "Manage NuGet Packages..."
- "Updates", SELECIONA TODOS E ATUALIZA
- NA "Solution Explorer" ABRE "Projeto MVC > Views > Shared > _Layout.cshtml"
- NO FIM DO ARQUIVO TEM UMA LINHA QUE INFORMA O SCRIPT DO JQuery
- CONSERTE ESSA LINHA DE
"<script src="~/Scripts/jquery-1.10.2.min.js"></script>"
PARA
"<script src="~/Scripts/jquery-3.3.1.min.js"></script>"

// CRIANDO CAMADA DAL (DATA ACCESS LAYER)
- CLIQUE COM O BOTÃO DIREITO NA SOLUÇÃO EM "Solution Explorer"
- "Solution > Add > New Project..."
- "Visual C# > Class Library (.NET Framework)"
- NOMEIA DE "Treinando01.DAL" E CLICA EM OK
- DELETA A "Class1.cs" QUE VEM POR PADRÃO
- ADICIONE UMA PASTA COM O NOME "ConnectionFactories"
E DENTRO UMA CLASSE CHAMADA "ConnectionFactory"
- NESSA CLASSE CRIE UM MÉTODO "GetConnection" PARA EFETUAR
A CONEXÃO COM O BANCO DE DADOS
- CRIE UMA PASTA "Repositories"
- DENTRO DELA CRIE A CLASSE "AlunoRepository"
E UMA PASTA "Interfaces" COM A INTERFACE "IAlunoRepository" DENTRO 
- NA INTEFACE "IAlunoRepository" DEFINA OS METODOS QUE EXISTIRÃO
CRIE OS MÉTODOS (Cadastrar, Listar, Buscar, Editar, Excluir)
NO FORMATO "TipoRetorno NomeMetodo(ParametrosCasoHaja);"
- NA CLASSE "AlunoRepository" FAÇA A HERANÇA DE "IAlunoRepository"
E IMPLEMENTE OS MÉTODOS NECESSÁRIOS
- EM CADA MÉTODO COLOQUE UM "using(var db = ConnectionFactory.GetConnection()){}"
E DENTRO DELE DEFINA O COMANDO A SER EXECUTADO
- EXECUTE O COMANDO E RETORNE O DADO QUE FOI DETERMINADO
- AO UTILIZAR "db.Query" OU "db.Execute" APARECERÁ UM ERRO
CONSERTE-O IMPORTANDO A LIB "Dapper"

// CRIANDO MÉTODOS "Cadastrar" (GET E POST)
- CRIE UM MÉTODO GET "Cadastrar" QUE RETORNE UM "AlunoModel" PARA A VIEW
- CLICA EM "AlunoModel", "Alt+Enter" e "Enter" PARA IMPORTAR "Models"
- ADD VIEW
- DEFINE O TIPO DE RETORNO QUE A VIEW ESTÁ TENDO
- COLOCA CAMPOS PARA NOME E RM E UM "submit" DENTRO DE UM FORM
- CRIE UM MÉTODO POST "Cadastrar" QUE RECEBA UM "AlunoModel"
- CONVERTE DE "AlunoModel" PARA "AlunoMOD"
- CRIE UM ATRIBUTO PRIVADO PARA O "_alunoRepository"
USE ESSE ATRIBUTO PARA ACESSAR A TABELA "Aluno" DO BANCO DE DADOS 

// REFERÊNCIAS NECESSÁRIA
- MVC --> (DAL E MOD)
- DAL --> (MOD)
- MOD --> ()
- Banco --> ()